/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TP1;
import javax.swing.*;
import java.util.*;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Queue;
/**
 *
 * @author Infinite
 */
public class main extends javax.swing.JFrame {

    final String cEsquerda = "E";
    final String cDireita = "D";
    final String cCima = "C";
    final String cBaixo = "B";
    
    /**
     * Creates new form main
     */
    public main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel8 = new javax.swing.JLabel();
        l1c1 = new javax.swing.JSpinner();
        l1c2 = new javax.swing.JSpinner();
        l1c3 = new javax.swing.JSpinner();
        l2c3 = new javax.swing.JSpinner();
        l2c2 = new javax.swing.JSpinner();
        l2c1 = new javax.swing.JSpinner();
        l3c1 = new javax.swing.JSpinner();
        l3c2 = new javax.swing.JSpinner();
        l3c3 = new javax.swing.JSpinner();
        Desafio2 = new javax.swing.JButton();
        Desafio1 = new javax.swing.JButton();
        ProfundidadeMaxima = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        cbIterativo = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TP1 - Buscas em Largura e Profundidade");

        jLabel8.setText("Insira os dados na Matriz - (Deixe com 0 para representar o estado vazio)");

        l1c1.setModel(new javax.swing.SpinnerNumberModel(1, 0, 8, 1));

        l1c2.setModel(new javax.swing.SpinnerNumberModel(2, 0, 8, 1));

        l1c3.setModel(new javax.swing.SpinnerNumberModel(3, 0, 8, 1));

        l2c3.setModel(new javax.swing.SpinnerNumberModel(6, 0, 8, 1));

        l2c2.setModel(new javax.swing.SpinnerNumberModel(5, 0, 8, 1));

        l2c1.setModel(new javax.swing.SpinnerNumberModel(4, 0, 8, 1));

        l3c1.setModel(new javax.swing.SpinnerNumberModel(7, 0, 8, 1));

        l3c2.setModel(new javax.swing.SpinnerNumberModel(8, 0, 8, 1));

        l3c3.setModel(new javax.swing.SpinnerNumberModel(0, 0, 8, 1));

        Desafio2.setText("Busca em Largura");
        Desafio2.setToolTipText("");
        Desafio2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Desafio2ActionPerformed(evt);
            }
        });

        Desafio1.setText("Busca em profundidade");
        Desafio1.setToolTipText("");
        Desafio1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Desafio1ActionPerformed(evt);
            }
        });

        ProfundidadeMaxima.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        ProfundidadeMaxima.setToolTipText("");

        jLabel9.setText("Insira a profundidade maximo da busca: ");

        cbIterativo.setText("Iterativo");
        cbIterativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbIterativoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Desafio1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Desafio2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel8)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(133, 133, 133)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(l1c1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(l1c2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(l1c3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(l2c1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(l3c1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(l2c2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(l2c3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(l3c2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(l3c3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(ProfundidadeMaxima, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbIterativo)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l1c1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(l1c2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(l1c3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l2c1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(l2c3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(l2c2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l3c2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(l3c1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(l3c3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(ProfundidadeMaxima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbIterativo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Desafio1)
                    .addComponent(Desafio2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private class MatrizProfundidade{
        int[][] Matriz = new int[3][3];
        int Profundidade;
        String ProximoMovimento;     
        Boolean PodeMover = false;
    }      
    
    private class PosicaoMatriz{
        int linha;
        int coluna;
    }  
    int[][] MatrizFinal = new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 0}};    
    
    Boolean ChegouObjetivo = false;
    private Stack<MatrizProfundidade> pilhaProximos = new Stack<MatrizProfundidade>();
    private Stack<MatrizProfundidade> pilhaPercorridos = new Stack<MatrizProfundidade>();    
    
    private List<MatrizProfundidade> ListaVisitados = new ArrayList<MatrizProfundidade>();
    private Queue<MatrizProfundidade> FilaProximos = new LinkedList<MatrizProfundidade>();
    
    
    private void Desafio2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Desafio2ActionPerformed
        int Matriz[][] = new int[3][3];        
        int zerados = 0;
        int Value = 0;
        Value = (Integer)l1c1.getValue(); Matriz[0][0] = Value; if(Value == 0){zerados++;}
        Value = (Integer)l1c2.getValue(); Matriz[0][1] = Value; if(Value == 0){zerados++;}
        Value = (Integer)l1c3.getValue(); Matriz[0][2] = Value; if(Value == 0){zerados++;}
        Value = (Integer)l2c1.getValue(); Matriz[1][0] = Value; if(Value == 0){zerados++;}
        Value = (Integer)l2c2.getValue(); Matriz[1][1] = Value; if(Value == 0){zerados++;}
        Value = (Integer)l2c3.getValue(); Matriz[1][2] = Value; if(Value == 0){zerados++;}
        Value = (Integer)l3c1.getValue(); Matriz[2][0] = Value; if(Value == 0){zerados++;}
        Value = (Integer)l3c2.getValue(); Matriz[2][1] = Value; if(Value == 0){zerados++;}
        Value = (Integer)l3c3.getValue(); Matriz[2][2] = Value; if(Value == 0){zerados++;}

        if (zerados > 1){
            JOptionPane.showMessageDialog(rootPane, "Deve ser informado somente um espaço vazio.");
            return;
        } else if (zerados == 0){
            JOptionPane.showMessageDialog(rootPane, "Deve ser informado pelo menos um espaço vazio.");
            return;
        }
        //Verificar se a matrix é válida 
        int v[] = new int[9];
        for (int i=0; i<9; i++) {v[i] = 0;} //zera o vetor
        
        for (int zIndex = 0; zIndex < 3; zIndex++) {
            for (int yIndex = 0; yIndex < 3; yIndex++) {                
                v[Matriz[zIndex][yIndex]]++;
            }
        }
        
        for (int i=0; i<9; i++) {
            if (v[i] > 1){
                JOptionPane.showMessageDialog(rootPane, "Deve ser informado todos os numeros entre 0 e 8 e esses numeros não podem repetir.\nVerifique");
                return;
            }
        } 
        //Fim verificação matrix válida 
               
        MatrizProfundidade MatrizInicio = new MatrizProfundidade();
        CopiaMatriz(Matriz, MatrizInicio.Matriz);
        MatrizInicio.Profundidade=0;
        MatrizInicio.ProximoMovimento="I";
        ChegouObjetivo = false;
        try{
            BuscaLargura(MatrizInicio);
        }catch(Exception e){
            ChegouObjetivo = true;
            JOptionPane.showMessageDialog(rootPane, "Ocorreu o seguinte erro ao tentar realizar a busca: "+e.getMessage());
        }
        
        ListaVisitados.removeAll(ListaVisitados);
        
        if (!ChegouObjetivo){            
            JOptionPane.showMessageDialog(rootPane, "Não foi possível alcançar o objetivo.");
            while (!pilhaPercorridos.isEmpty()) {
                pilhaPercorridos.pop();
            }            
        } 
        
        if (ChegouObjetivo){
            //Eu inverto a pilha para mostrar ela na ordem correta
            Stack<MatrizProfundidade> pilhaInversa = new Stack<MatrizProfundidade>();
            while (!pilhaPercorridos.isEmpty()) {
                MatrizProfundidade MatrizAux = new MatrizProfundidade();
                MatrizAux = pilhaPercorridos.pop();                
                pilhaInversa.add(MatrizAux);
            }
            
            while (!pilhaInversa.isEmpty()) {
                MatrizProfundidade MatrizAux = new MatrizProfundidade();
                MatrizAux = pilhaInversa.pop();
                MostraMatriz(MatrizAux.Matriz, "Sequencia feita para alcançar o resultado: ");
            }
        }
        ChegouObjetivo = false;
    }//GEN-LAST:event_Desafio2ActionPerformed

    private PosicaoMatriz PegaPosicaoZerada(int[][] MatrizZerada){     
        PosicaoMatriz PosicaoAux = new PosicaoMatriz();
        PosicaoAux.coluna = 0; PosicaoAux.linha = 0;
        for (int zIndex = 0; zIndex < 3; zIndex++) {
            for (int yIndex = 0; yIndex < 3; yIndex++) {
                if(MatrizZerada[zIndex][yIndex] == 0){
                    PosicaoAux.linha = zIndex;
                    PosicaoAux.coluna = yIndex;
                    break;
                }
            }
        }
        return PosicaoAux;
    }
    
    private void BuscaProdundidade(MatrizProfundidade Matriz){
        pilhaPercorridos.add(Matriz);        
        
        if (!Matriz.PodeMover){
            pilhaPercorridos.pop();
            return;
        }
        
        if (ComparaMatriz(Matriz.Matriz, MatrizFinal)){
            JOptionPane.showMessageDialog(rootPane, "A matriz chegou ao seu destino.");
            while (!pilhaProximos.isEmpty()) {
                pilhaProximos.pop();
            }
            ChegouObjetivo = true;
            return;
        }
        
        MatrizProfundidade MatrizAux = new MatrizProfundidade();
        for (int i = 0; i < ListaVisitados.size(); i++) {
            MatrizAux = ListaVisitados.get(i);
            if(ComparaMatriz(MatrizAux.Matriz, Matriz.Matriz)){                
                pilhaPercorridos.pop();
                return;
            }
        } 
        MatrizAux = null;
        ListaVisitados.add(Matriz);
        

        ListaVisitados.add(Matriz);
        if (Matriz.Profundidade >= (Integer)ProfundidadeMaxima.getValue()){
            pilhaPercorridos.pop();
            return;
        }
        
        PosicaoMatriz PosicaoZerada = new PosicaoMatriz();
        PosicaoMatriz PosicaoDestino = new PosicaoMatriz();
        PosicaoZerada = PegaPosicaoZerada(Matriz.Matriz);                
            
        MatrizProfundidade MatrizEsquerda = new MatrizProfundidade();
        if (VerificaPodeMover(cEsquerda, PosicaoZerada, PosicaoDestino)){
            MatrizEsquerda.PodeMover = true;
            CopiaMatriz(Matriz.Matriz, MatrizEsquerda.Matriz);
            MatrizEsquerda.Profundidade=Matriz.Profundidade+1;
            MatrizEsquerda.ProximoMovimento=cEsquerda;
            pilhaProximos.push(MatrizEsquerda);
        }

        MatrizProfundidade MatrizDireita = new MatrizProfundidade();
        if (VerificaPodeMover(cDireita, PosicaoZerada, PosicaoDestino)){       
            MatrizDireita.PodeMover = true;
            CopiaMatriz(Matriz.Matriz, MatrizDireita.Matriz);
            MatrizDireita.Profundidade=Matriz.Profundidade+1;
            MatrizDireita.ProximoMovimento=cDireita;
            pilhaProximos.push(MatrizDireita);
        }

        MatrizProfundidade MatrizCima = new MatrizProfundidade();
        if (VerificaPodeMover(cCima, PosicaoZerada, PosicaoDestino)){     
            MatrizCima.PodeMover = true;
            CopiaMatriz(Matriz.Matriz, MatrizCima.Matriz);
            MatrizCima.Profundidade=Matriz.Profundidade+1;
            MatrizCima.ProximoMovimento=cCima;
            pilhaProximos.push(MatrizCima);
        }

        MatrizProfundidade MatrizBaixo = new MatrizProfundidade();
        if (VerificaPodeMover(cBaixo, PosicaoZerada, PosicaoDestino)){            
            MatrizBaixo.PodeMover = true;
            CopiaMatriz(Matriz.Matriz, MatrizBaixo.Matriz);
            MatrizBaixo.Profundidade=Matriz.Profundidade+1;
            MatrizBaixo.ProximoMovimento=cBaixo;
            pilhaProximos.push(MatrizBaixo);
        }

        while (!pilhaProximos.isEmpty()) {         
            MatrizProfundidade MatrizProximo = new MatrizProfundidade();
            MatrizProximo = pilhaProximos.pop();
            PosicaoZerada = PegaPosicaoZerada(MatrizProximo.Matriz);
            VerificaPodeMover(MatrizProximo.ProximoMovimento, PosicaoZerada, PosicaoDestino);
            MovimentaMatriz(MatrizProximo.Matriz, PosicaoZerada, PosicaoDestino);                   
        
            BuscaProdundidade(MatrizProximo);
        }        
    }
    
    private void BuscaLargura(MatrizProfundidade Matriz){
        pilhaPercorridos.add(Matriz);                
        if (ComparaMatriz(Matriz.Matriz, MatrizFinal)){
            JOptionPane.showMessageDialog(rootPane, "A matriz chegou ao seu destino.");
            while (!FilaProximos.isEmpty()) {
                FilaProximos.remove();
            }
            ChegouObjetivo = true;
            return;
        }
        
        MatrizProfundidade MatrizAux = new MatrizProfundidade();
        for (int i = 0; i < ListaVisitados.size(); i++) {
            MatrizAux = ListaVisitados.get(i);
            if(ComparaMatriz(MatrizAux.Matriz, Matriz.Matriz)){                
                pilhaPercorridos.pop();
                return;
            }
        } 
        MatrizAux = null;
        ListaVisitados.add(Matriz);
        
        PosicaoMatriz PosicaoZerada = new PosicaoMatriz();
        PosicaoMatriz PosicaoDestino = new PosicaoMatriz();
        PosicaoZerada = PegaPosicaoZerada(Matriz.Matriz);                
            
        if (VerificaPodeMover(cEsquerda, PosicaoZerada, PosicaoDestino)){
            MatrizProfundidade MatrizEsquerda = new MatrizProfundidade();
            CopiaMatriz(Matriz.Matriz, MatrizEsquerda.Matriz);
            MatrizEsquerda.ProximoMovimento=cEsquerda;
            FilaProximos.add(MatrizEsquerda);
        }

        if (VerificaPodeMover(cDireita, PosicaoZerada, PosicaoDestino)){
            MatrizProfundidade MatrizDireita = new MatrizProfundidade();
            CopiaMatriz(Matriz.Matriz, MatrizDireita.Matriz);
            MatrizDireita.ProximoMovimento=cDireita;
            FilaProximos.add(MatrizDireita);
        }

        if (VerificaPodeMover(cCima, PosicaoZerada, PosicaoDestino)){     
            MatrizProfundidade MatrizCima = new MatrizProfundidade();
            CopiaMatriz(Matriz.Matriz, MatrizCima.Matriz);
            MatrizCima.ProximoMovimento=cCima;
            FilaProximos.add(MatrizCima);
        }

        if (VerificaPodeMover(cBaixo, PosicaoZerada, PosicaoDestino)){
            MatrizProfundidade MatrizBaixo = new MatrizProfundidade();
            CopiaMatriz(Matriz.Matriz, MatrizBaixo.Matriz);
            MatrizBaixo.ProximoMovimento=cBaixo;
            FilaProximos.add(MatrizBaixo);
        }

        while (!FilaProximos.isEmpty()) {         
            MatrizProfundidade MatrizProximo = new MatrizProfundidade();
            MatrizProximo = FilaProximos.remove();
            PosicaoZerada = PegaPosicaoZerada(MatrizProximo.Matriz);
            VerificaPodeMover(MatrizProximo.ProximoMovimento, PosicaoZerada, PosicaoDestino);
            MovimentaMatriz(MatrizProximo.Matriz, PosicaoZerada, PosicaoDestino);                   
        
            BuscaLargura(MatrizProximo);
        }        
    }
    
    private void Desafio1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Desafio1ActionPerformed
        int Matriz[][] = new int[3][3];        
        int zerados = 0;
        int Value = 0;
        Value = (Integer)l1c1.getValue(); Matriz[0][0] = Value; if(Value == 0){zerados++;}
        Value = (Integer)l1c2.getValue(); Matriz[0][1] = Value; if(Value == 0){zerados++;}
        Value = (Integer)l1c3.getValue(); Matriz[0][2] = Value; if(Value == 0){zerados++;}
        Value = (Integer)l2c1.getValue(); Matriz[1][0] = Value; if(Value == 0){zerados++;}
        Value = (Integer)l2c2.getValue(); Matriz[1][1] = Value; if(Value == 0){zerados++;}
        Value = (Integer)l2c3.getValue(); Matriz[1][2] = Value; if(Value == 0){zerados++;}
        Value = (Integer)l3c1.getValue(); Matriz[2][0] = Value; if(Value == 0){zerados++;}
        Value = (Integer)l3c2.getValue(); Matriz[2][1] = Value; if(Value == 0){zerados++;}
        Value = (Integer)l3c3.getValue(); Matriz[2][2] = Value; if(Value == 0){zerados++;}

        if (zerados > 1){
            JOptionPane.showMessageDialog(rootPane, "Deve ser informado somente um espaço vazio.");
            return;
        } else if (zerados == 0){
            JOptionPane.showMessageDialog(rootPane, "Deve ser informado pelo menos um espaço vazio.");
            return;
        }
        //Verificar se a matrix é válida 
        int v[] = new int[9];
        for (int i=0; i<9; i++) {v[i] = 0;} //zera o vetor
        
        for (int zIndex = 0; zIndex < 3; zIndex++) {
            for (int yIndex = 0; yIndex < 3; yIndex++) {                
                v[Matriz[zIndex][yIndex]]++;
            }
        }
        
        for (int i=0; i<9; i++) {
            if (v[i] > 1){
                JOptionPane.showMessageDialog(rootPane, "Deve ser informado todos os numeros entre 0 e 8 e esses numeros não podem repetir.\nVerifique");
                return;
            }
        } 
        //Fim verificação matrix válida 
               
        if(cbIterativo.isSelected()){ProfundidadeMaxima.setValue(1);}
            
        MatrizProfundidade MatrizInicio = new MatrizProfundidade();
        CopiaMatriz(Matriz, MatrizInicio.Matriz);
        MatrizInicio.Profundidade=0;
        MatrizInicio.PodeMover = true;
        MatrizInicio.ProximoMovimento="I";
        ChegouObjetivo = false;
        try{
            BuscaProdundidade(MatrizInicio);
        }catch(Exception e){
            ChegouObjetivo = true;
            JOptionPane.showMessageDialog(rootPane, "Ocorreu o seguinte erro ao tentar realizar a busca: "+e.getMessage());
        }
        
        ListaVisitados.removeAll(ListaVisitados);
        
        if (!ChegouObjetivo){
            if(cbIterativo.isSelected()){
                while (!ChegouObjetivo){
                    Integer Profundidade = (Integer)ProfundidadeMaxima.getValue();
                    JOptionPane.showMessageDialog(rootPane, "Aumentando a produndidade limite para "+(++Profundidade)+" e tentando novamente.");          
                    ProfundidadeMaxima.setValue(Profundidade);
                    while (!pilhaPercorridos.isEmpty()) {
                        pilhaPercorridos.pop();                
                    }
                    ListaVisitados.removeAll(ListaVisitados);

                    CopiaMatriz(Matriz, MatrizInicio.Matriz);
                    MatrizInicio.Profundidade=0;
                    MatrizInicio.ProximoMovimento="I";
                    MatrizInicio.PodeMover = true;
                    ChegouObjetivo = false;
                    try{
                        BuscaProdundidade(MatrizInicio);
                    }catch(Exception e){
                        ChegouObjetivo = true;
                        JOptionPane.showMessageDialog(rootPane, "Ocorreu o seguinte erro ao tentar realizar a busca: "+e.getMessage());
                    }
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Não foi possível alcançar o objetivo com a profundidade limite informada.");
                while (!pilhaPercorridos.isEmpty()) {
                    pilhaPercorridos.pop();
                }
            }
        } 
        
        if (ChegouObjetivo){
            //Eu inverto a pilha para mostrar ela na ordem correta
            Stack<MatrizProfundidade> pilhaInversa = new Stack<MatrizProfundidade>();
            while (!pilhaPercorridos.isEmpty()) {
                MatrizProfundidade MatrizAux = new MatrizProfundidade();
                MatrizAux = pilhaPercorridos.pop();                
                pilhaInversa.add(MatrizAux);
            }
            
            while (!pilhaInversa.isEmpty()) {
                MatrizProfundidade MatrizAux = new MatrizProfundidade();
                MatrizAux = pilhaInversa.pop();
                MostraMatriz(MatrizAux.Matriz, "Sequencia feita para alcançar o resultado: ");
            }
        }
        ChegouObjetivo = false;
    }//GEN-LAST:event_Desafio1ActionPerformed

    private void cbIterativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbIterativoActionPerformed
        
    }//GEN-LAST:event_cbIterativoActionPerformed
    
    public static Boolean VerificaPodeMover(String Direcao, PosicaoMatriz PosicaoZerada, PosicaoMatriz PosicaoDestino){
        PosicaoDestino.linha = PosicaoZerada.linha;
        PosicaoDestino.coluna = PosicaoZerada.coluna;
                
        switch (Direcao) {
            case "E": PosicaoDestino.coluna = ((PosicaoZerada.coluna-1 >= 0) ? PosicaoZerada.coluna-1 : PosicaoZerada.coluna); break;
            case "D": PosicaoDestino.coluna = ((PosicaoZerada.coluna+1 <= 2) ? PosicaoZerada.coluna+1 : PosicaoZerada.coluna); break;
            case "C": PosicaoDestino.linha = ((PosicaoZerada.linha-1 >= 0) ? PosicaoZerada.linha-1 : PosicaoZerada.linha); break;
            case "B": PosicaoDestino.linha = ((PosicaoZerada.linha+1 <= 2) ? PosicaoZerada.linha+1 : PosicaoZerada.linha); break;
            default: PosicaoDestino.linha = PosicaoZerada.linha; PosicaoDestino.coluna = PosicaoZerada.coluna;
        }      
        
        if ((PosicaoDestino.linha != PosicaoZerada.linha) || (PosicaoDestino.coluna != PosicaoZerada.coluna)){
            return true;
        } else {
            return false;
        }
    }
    
    public static void MovimentaMatriz(int[][] MatrizMove, PosicaoMatriz PosicaoZerada, PosicaoMatriz PosicaoDestino){
        int Valor = MatrizMove[PosicaoDestino.linha][PosicaoDestino.coluna];
        MatrizMove[PosicaoDestino.linha][PosicaoDestino.coluna] = 0;
        MatrizMove[PosicaoZerada.linha][PosicaoZerada.coluna] = Valor;
    }
    
    public static void CopiaMatriz(int[][] MatrizAntes, int[][] MatrizPos){
        for (int zIndex = 0; zIndex < 3; zIndex++) {
            for (int yIndex = 0; yIndex < 3; yIndex++) {                
                MatrizPos[zIndex][yIndex] = MatrizAntes[zIndex][yIndex];             
            }
        }
    }
    
    public void MostraMatriz(int[][] Matriz, String Msg){
        String Text = Msg+"\n";
        for (int zIndex = 0; zIndex < 3; zIndex++) {
            Text += "\t";
            for (int yIndex = 0; yIndex < 3; yIndex++) {                
                Text += (Matriz[zIndex][yIndex] != 0 ? Matriz[zIndex][yIndex]+"   " : "     ");
            }
            Text += "\n";
        }
        JOptionPane.showMessageDialog(rootPane, Text);
    }
    
    public static Boolean ComparaMatriz(int[][] Matriz1, int[][] Matriz2){
        for (int zIndex = 0; zIndex < 3; zIndex++) {
            for (int yIndex = 0; yIndex < 3; yIndex++) {
                if(Matriz1[zIndex][yIndex] != Matriz2[zIndex][yIndex]){
                    return false;
                }
            }
        }
        return true;
    }    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Desafio1;
    private javax.swing.JButton Desafio2;
    private javax.swing.JSpinner ProfundidadeMaxima;
    private javax.swing.JCheckBox cbIterativo;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSpinner l1c1;
    private javax.swing.JSpinner l1c2;
    private javax.swing.JSpinner l1c3;
    private javax.swing.JSpinner l2c1;
    private javax.swing.JSpinner l2c2;
    private javax.swing.JSpinner l2c3;
    private javax.swing.JSpinner l3c1;
    private javax.swing.JSpinner l3c2;
    private javax.swing.JSpinner l3c3;
    // End of variables declaration//GEN-END:variables
}
